{"version":3,"file":"static/js/696.40c94641.chunk.js","mappings":"oSAEaA,EAAYC,EAAAA,GAAAA,GAAH,oMAWTC,EAAYD,EAAAA,GAAAA,GAAH,mMAUTE,EAAOF,EAAAA,GAAAA,KAAH,wIAQJG,EAAYH,EAAAA,GAAAA,EAAH,mEAKTI,EAAQJ,EAAAA,GAAAA,IAAH,wC,4BC7BlBK,IAAAA,OAAAA,KAAqB,CACnBC,MAAO,QACPC,SAAU,aACVC,SAAU,QACVC,QAAS,IACTC,SAAU,SAGZ,IA4CA,EA5Cc,WACZ,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwBF,EAAAA,EAAAA,WAAS,GAAjC,eAAOG,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8EACE,KACEC,EAAAA,EAAAA,IAAQR,GAAIS,MAAK,SAAAC,GACfN,EAASM,GACTJ,GAAQ,EACT,GAGF,CAFC,MAAOK,GACPjB,IAAAA,OAAAA,QAAwBiB,EACzB,CARH,4CADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACZ,IAGJ,GAAIK,EACF,OACE,SAACjB,EAAD,UACGe,EAAMU,KAAKC,KAAI,SAAAD,GAAI,OAClB,UAACvB,EAAD,YACE,SAACG,EAAD,CACEsB,IACEF,EAAKG,aATI,mCAUYH,EAAKG,aACtBC,EAENC,IAAKL,EAAKM,QAEZ,SAAC5B,EAAD,kCACA,SAACC,EAAD,UAAYqB,EAAKM,QACjB,SAAC5B,EAAD,+BACA,SAACC,EAAD,UAAYqB,EAAKO,cAZHP,EAAKM,KADH,KAmB3B,C,mMCzDYE,EAAU,mCACVC,EAAW,gCCGjB,SAAeC,IAAtB,+B,aAAO,O,oBAAA,oGAEGC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sCAAmDD,EAAnD,OAFH,cACCI,EADD,yBAIEA,EAASf,MAJX,kEAQA,SAAegB,EAAtB,kC,aAAO,O,oBAAA,WAAyBC,GAAzB,uFAEGH,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iCAA8CD,EAA9C,yBAAsEM,EAAtE,OAFH,cACCF,EADD,yBAIEA,EAASf,MAJX,kEAQA,SAAekB,EAAtB,kC,aAAO,O,oBAAA,WAA4B5B,GAA5B,uFACkBwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BtB,EAA/B,oBAA6CqB,EAA7C,OADlB,cACCI,EADD,yBAGEA,EAASf,MAHX,kEAOA,SAAeF,EAAtB,kC,aAAO,O,oBAAA,WAAuBR,GAAvB,uFAEGwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BtB,EAA/B,4BAAqDqB,EAArD,OAFH,cACCI,EADD,yBAIEA,EAASf,MAJX,kEAQA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA0B7B,GAA1B,uFAEGwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BtB,EAA/B,4BAAqDqB,EAArD,OAFH,cACCI,EADD,yBAIEA,EAASf,MAJX,kE","sources":["components/Casts/Casts.styled.jsx","components/Casts/Casts.jsx","services/baseURL.js","services/getFetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastsList = styled.ul`\n  display: flex;\n  justify-content: flex-start;\n  padding: 25px;\n  padding-right: 35px;\n  margin-left: 10px;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 65px;\n`;\n\nexport const CastsItem = styled.li`\n  display: flex;\n  width: 200px;\n  flex-direction: column;\n  margin-bottom: 15px;\n  background-color: #a8daf7;\n  border-bottom-left-radius: 15px;\n  color: #382aff;\n`;\n\nexport const Span = styled.span`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  letter-spacing: 0.03em;\n  margin-left: 5px;\n`;\n\nexport const Paragraph = styled.p`\n  text-align: end;\n  margin-right: 10px;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getCast } from '../../services/getFetch';\nimport noCastPhoto from '../../images/noCastPhoto.png';\nimport { CastsList, CastsItem, Span, Paragraph, Image } from './Casts.styled';\n\nimport Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  width: '420px',\n  position: 'center-top',\n  distance: '100px',\n  timeout: 2000,\n  fontSize: '20px',\n});\n\nconst Casts = () => {\n  const { id } = useParams();\n  const [casts, setCasts] = useState({});\n  const [flag, setFlag] = useState(false);\n\n  useEffect(() => {\n    async function getCasts() {\n      try {\n        getCast(id).then(data => {\n          setCasts(data);\n          setFlag(true);\n        });\n      } catch (err) {\n        Notiflix.Notify.failure(err);\n      }\n    }\n    getCasts();\n  }, [id]);\n  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n\n  if (flag) {\n    return (\n      <CastsList>\n        {casts.cast.map(cast => (\n          <CastsItem key={cast.name}>\n            <Image\n              src={\n                cast.profile_path\n                  ? IMAGE_BASE_URL + cast.profile_path\n                  : noCastPhoto\n              }\n              alt={cast.name}\n            />\n            <Span>Аctor's name:</Span>\n            <Paragraph>{cast.name}</Paragraph>\n            <Span>Сharacter:</Span>\n            <Paragraph>{cast.character}</Paragraph>\n          </CastsItem>\n        ))}\n      </CastsList>\n    );\n  }\n};\n\nexport default Casts;\n","export const KEY_API = 'db72402e2e89e57b99e88c265b440972';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n","import axios from 'axios';\nimport { KEY_API, BASE_URL } from './baseURL';\n\n// *************GET POPULAR MOVIES****************\nexport async function getPopularFilms() {\n  const response =\n    await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET BY USER PARAMS****************\nexport async function getMovies(searchParams) {\n  const response =\n    await axios.get(`${BASE_URL}/search/movie?api_key=${KEY_API}&page=1&query=${searchParams}\n`);\n  return response.data;\n}\n\n// *************GET BY ID****************\nexport async function getMovieById(id) {\n  const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET CAST****************\nexport async function getCast(id) {\n  const response =\n    await axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET REVIEWS ****************\nexport async function getReviews(id) {\n  const response =\n    await axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY_API}\n`);\n  return response.data;\n}\n"],"names":["CastsList","styled","CastsItem","Span","Paragraph","Image","Notiflix","width","position","distance","timeout","fontSize","id","useParams","useState","casts","setCasts","flag","setFlag","useEffect","getCast","then","data","err","getCasts","cast","map","src","profile_path","noCastPhoto","alt","name","character","KEY_API","BASE_URL","getPopularFilms","axios","response","getMovies","searchParams","getMovieById","getReviews"],"sourceRoot":""}
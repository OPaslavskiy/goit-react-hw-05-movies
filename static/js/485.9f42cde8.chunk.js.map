{"version":3,"file":"static/js/485.9f42cde8.chunk.js","mappings":"qQAEaA,EAAaC,EAAAA,GAAAA,GAAH,wKAUVC,EAAaD,EAAAA,GAAAA,GAAH,opBAkCVE,EAAQF,EAAAA,GAAAA,IAAH,0DAKLG,EAAYH,EAAAA,GAAAA,GAAH,0M,4BC7CtBI,IAAAA,OAAAA,KAAqB,CACnBC,MAAO,QACPC,SAAU,aACVC,SAAU,QACVC,QAAS,KACTC,SAAU,SAGZ,IA2CA,EA3Ca,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAoBjB,OAjBAC,EAAAA,EAAAA,YAAU,YAENC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJN,EAASM,EAAKC,SACdf,IAAAA,OAAAA,QAAA,wDAGD,IACAgB,OAAM,SAAAC,GACLjB,IAAAA,OAAAA,QAAwBiB,EACzB,GAIN,GAAE,KAGD,UAACtB,EAAD,WACGY,EAAMW,KAAI,SAAAC,GACT,IACMC,EAAO,UADU,oCACV,OAAuBD,EAAKE,eAEzC,OACE,SAAC,KAAD,CAASC,GAAE,iBAAYH,EAAKI,IAAMC,MAAO,CAAEC,KAAMhB,GAAjD,UACE,UAACZ,EAAD,YACE,SAACC,EAAD,CAAO4B,IAAKN,EAASO,IAAKR,EAAKS,kBAC/B,SAAC7B,EAAD,UAAYoB,EAAKS,mBAFFT,EAAKI,KAM3B,KAED,SAAC,KAAD,MAGL,C,mMCvDYM,EAAU,mCACVC,EAAW,gCCGjB,SAAelB,IAAtB,+B,aAAO,O,oBAAA,oGAEGmB,EAAAA,EAAAA,IAAA,UAAaD,EAAb,sCAAmDD,EAAnD,OAFH,cACCG,EADD,yBAIEA,EAASlB,MAJX,kEAQA,SAAemB,EAAtB,kC,aAAO,O,oBAAA,WAAyBC,GAAzB,uFAEGH,EAAAA,EAAAA,IAAA,UAAaD,EAAb,iCAA8CD,EAA9C,yBAAsEK,EAAtE,OAFH,cACCF,EADD,yBAIEA,EAASlB,MAJX,kEAQA,SAAeqB,EAAtB,kC,aAAO,O,oBAAA,WAA4BZ,GAA5B,uFACkBQ,EAAAA,EAAAA,IAAA,UAAaD,EAAb,kBAA+BP,EAA/B,oBAA6CM,EAA7C,OADlB,cACCG,EADD,yBAGEA,EAASlB,MAHX,kEAOA,SAAesB,EAAtB,kC,aAAO,O,oBAAA,WAAuBb,GAAvB,uFAEGQ,EAAAA,EAAAA,IAAA,UAAaD,EAAb,kBAA+BP,EAA/B,4BAAqDM,EAArD,OAFH,cACCG,EADD,yBAIEA,EAASlB,MAJX,kEAQA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAA0Bd,GAA1B,uFAEGQ,EAAAA,EAAAA,IAAA,UAAaD,EAAb,kBAA+BP,EAA/B,4BAAqDM,EAArD,OAFH,cACCG,EADD,yBAIEA,EAASlB,MAJX,kE","sources":["pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/baseURL.js","services/getFetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  justify-content: center;\n  padding: 25px;\n  margin-left: 15px;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 65px;\n`;\n\nexport const MoviesItem = styled.li`\n  width: 350px;\n  margin-top: 10px;\n  background-color: #a8daf7;\n  border-bottom-left-radius: 15px;\n\n  &:hover,\n  &:focus {\n    transition: all 0.2s ease-out;\n    box-shadow: 0px 4px 8px rgba(38, 38, 38, 0.2);\n    top: -4px;\n    background-color: #ffaebb;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    z-index: -1;\n    top: -16px;\n    right: -16px;\n    background: #00838d;\n    height: 32px;\n    width: 32px;\n    border-radius: 32px;\n    transform: scale(2);\n    transform-origin: 50% 50%;\n    transition: transform 0.15s ease-out;\n  }\n\n  &:hover:before {\n    transform: scale(2.15);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 350px;\n  height: auto;\n`;\n\nexport const FilmsName = styled.h2`\n  padding-bottom: 5px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  letter-spacing: 0.03em;\n  padding-left: 15px;\n  color: #382aff;\n  margin-top: -5px;\n`;\n","import { useState, useEffect } from 'react';\nimport { NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { getPopularFilms } from '../../services/getFetch';\nimport { MoviesList, MoviesItem, Image, FilmsName } from './Home.styled';\n\nimport Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  width: '420px',\n  position: 'center-top',\n  distance: '100px',\n  timeout: 1500,\n  fontSize: '20px',\n});\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n  //   const [status, setStatus] = useState('stoped');\n\n  useEffect(() => {\n    function getFilms() {\n      getPopularFilms()\n        .then(data => {\n          setFilms(data.results);\n          Notiflix.Notify.success(\n            `We have prepared for you the 20 best movies for today`\n          );\n        })\n        .catch(err => {\n          Notiflix.Notify.failure(err);\n        });\n    }\n\n    getFilms();\n  }, []);\n\n  return (\n    <MoviesList>\n      {films.map(film => {\n        const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n        const IMG_URL = `${IMAGE_BASE_URL}${film.backdrop_path}`;\n\n        return (\n          <NavLink to={`movies/${film.id}`} state={{ from: location }}>\n            <MoviesItem key={film.id}>\n              <Image src={IMG_URL} alt={film.original_title} />\n              <FilmsName>{film.original_title}</FilmsName>\n            </MoviesItem>\n          </NavLink>\n        );\n      })}\n\n      <Outlet />\n    </MoviesList>\n  );\n};\n\nexport default Home;\n","export const KEY_API = 'db72402e2e89e57b99e88c265b440972';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n","import axios from 'axios';\nimport { KEY_API, BASE_URL } from './baseURL';\n\n// *************GET POPULAR MOVIES****************\nexport async function getPopularFilms() {\n  const response =\n    await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET BY USER PARAMS****************\nexport async function getMovies(searchParams) {\n  const response =\n    await axios.get(`${BASE_URL}/search/movie?api_key=${KEY_API}&page=1&query=${searchParams}\n`);\n  return response.data;\n}\n\n// *************GET BY ID****************\nexport async function getMovieById(id) {\n  const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET CAST****************\nexport async function getCast(id) {\n  const response =\n    await axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${KEY_API}\n`);\n  return response.data;\n}\n\n// *************GET REVIEWS ****************\nexport async function getReviews(id) {\n  const response =\n    await axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY_API}\n`);\n  return response.data;\n}\n"],"names":["MoviesList","styled","MoviesItem","Image","FilmsName","Notiflix","width","position","distance","timeout","fontSize","useState","films","setFilms","location","useLocation","useEffect","getPopularFilms","then","data","results","catch","err","map","film","IMG_URL","backdrop_path","to","id","state","from","src","alt","original_title","KEY_API","BASE_URL","axios","response","getMovies","searchParams","getMovieById","getCast","getReviews"],"sourceRoot":""}